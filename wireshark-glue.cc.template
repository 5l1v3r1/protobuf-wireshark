#include "|PROTO_H_FILE|"

#include <iostream>
#include <string>
#include <list>

#include <google/protobuf/text_format.h>

using namespace std;
using namespace google;
using namespace protobuf;

extern "C" {

///////////////////////////////////////////////////////////////////////////////////
// Following are definitions that are from wireshark. The necessary headers are
// not included here to minimize dependencies of glue code
//////////////////////////////////////////////////////////////////////////////////
struct tvbuff_t;
struct proto_tree;
struct proto_item;

// Following enum should match wireshark/epan/ftypes/ftypes.h
enum ftenum {
        FT_NONE,        /* used for text labels with no value */
        FT_PROTOCOL,
        FT_BOOLEAN,     /* TRUE and FALSE come from <glib.h> */
        FT_UINT8,
        FT_UINT16,
        FT_UINT24,      /* really a UINT32, but displayed as 3 hex-digits if FD_HEX*/
        FT_UINT32,
        FT_UINT64,
        FT_INT8,
        FT_INT16,
        FT_INT24,       /* same as for UINT24 */
        FT_INT32,
        FT_INT64,
        FT_FLOAT,
        FT_DOUBLE,
        FT_ABSOLUTE_TIME,
        FT_RELATIVE_TIME,
        FT_STRING
};

extern proto_item* proto_tree_add_item( void *tree, int handle, void * tvb,
                                 int offset, int length, bool b );
extern proto_item* proto_tree_add_uint( void *tree, int handle, void * tvb,
                                 int offset, int length, unsigned int b );
extern proto_item* proto_tree_add_uint64( void *tree, int handle, void * tvb,
                                 int offset, int length, unsigned long long b );
extern proto_item* proto_tree_add_int( void *tree, int handle, void * tvb,
                                 int offset, int length, int b );
extern proto_item* proto_tree_add_int64( void *tree, int handle, void * tvb,
                                 int offset, int length, long long b );
extern proto_item* proto_tree_add_float( void *tree, int handle, void * tvb,
                                 int offset, int length, float b );
extern proto_item* proto_tree_add_double( void *tree, int handle, void * tvb,
                                 int offset, int length, double b );
extern proto_item* proto_tree_add_boolean( void *tree, int handle, void * tvb,
                                 int offset, int length, unsigned b );
extern proto_item* proto_tree_add_text( void *tree, void * tvb,
                                int offset, int length, const char* b, ... );
extern proto_item* proto_tree_add_int_format_value(void *tree, int handle, 
						   void *tvb, int offset, 
						   int length, int value, 
						   const char *format, ...);
extern proto_item* proto_tree_add_string( void *tree, int handle, void *tvb,
					  int offset, int length, 
					  const char* value );

extern proto_tree* proto_item_add_subtree( void * item, int tree_handle );

// end of wireshark definitions

// following functions are implemented in packet-|PLUGIN|.c code
extern int wireshark_pb_add_|PLUGIN_NAME|(void* tree_root, void *tvb, int item_id, char* msg_str);
extern void wireshark_pb_process_|PLUGIN_NAME|_register_subtree( int proto, const char* name,
                                                int *handle, int ** tree_handle );
extern void wireshark_pb_process_|PLUGIN_NAME|_register_field( int proto, int type,
                                                const char* name, const char * fullName,
                                                int *handle );

// rest of definitions are specific to this file
#define DBG( x ) { std::cout << x << std::endl; }
#define DBG_ERR( x ) { std::cerr << x << std::endl; }

typedef struct Handles
{
   int handle;
   int * tree_handle;

   Handles() : handle( -1 ), tree_handle( NULL ) {}
} Handles;

typedef std::pair<std::string, Handles> StringHandlePair;
typedef std::map<std::string, Handles> HandleMap;

static HandleMap* handleMap = NULL;

typedef std::vector<const Descriptor*> DescriptorList;
typedef std::vector<const FieldDescriptor*> FieldDescriptorList;

/** these are internal to this file */
void wireshark_pb_process_|PLUGIN_NAME|_message( const Message& message, 
                                                 proto_tree* tree,
						 tvbuff_t* tvb, int& offset );
void wireshark_pb_process_|PLUGIN_NAME|_descriptor( const Reflection* reflection, 
						    const Message& mess, 
						    const FieldDescriptor* field, 
						    proto_tree* tree, 
						    tvbuff_t* tvb, 
						    int& offset );
void wireshark_pb_process_|PLUGIN_NAME|_field( const Reflection* reflection, 
					       const Message& message,
					       const FieldDescriptor* field, 
					       proto_tree* tree, 
					       tvbuff_t* tvb, int& offset );

/**
  * @param buf The message contents
  * @param buf_size The length of message contents in buf
  * @param tree_root The WireShark tree to which this message is to be added.
  * @param item_id Internal wireshark id to refer to this FT_NONE datatype.
  */
int wireshark_pb_process_|PLUGIN_NAME|(proto_tree* tree_root, int item_id, tvbuff_t* tvb, void* buf, int buf_size) {

  |PACKAGE||PLUGIN_NAME| msg;
  if (!msg.ParseFromArray((char *) buf, buf_size)) {
    DBG_ERR( "Failed to parse message." );
    /*
    for (int i=0; i < buf_size; i++) {
      printf("%2x ", ((char *)buf)[i]);
    }
    */
    /*
    printf("buf size=%d\n", buf_size);
    printf("%s\n\n\n", buf);
    */
    return -1;
  }

  int offset = 0; 
  wireshark_pb_process_|PLUGIN_NAME|_message( msg, tree_root, tvb, offset );

  return 0;
}

void wireshark_pb_process_|PLUGIN_NAME|_register_subtree_( int proto, 
							   const std::string& name,
							   const std::string& full_name )
{
   Handles handles;
   wireshark_pb_process_|PLUGIN_NAME|_register_subtree( proto,
							name.c_str(),
							&(handles.handle), &(handles.tree_handle) );
   handleMap->insert( StringHandlePair( full_name, handles ) );
}

int wireshark_pb_process_|PLUGIN_NAME|_get_type( FieldDescriptor::CppType type )
{
  struct ftmap_t
  {
    FieldDescriptor::CppType cpp_type;
    ftenum fttype;
    int length;
  };

  static ftmap_t ftmap[] = {
     { FieldDescriptor::CPPTYPE_UINT32, FT_UINT32 },
     { FieldDescriptor::CPPTYPE_INT32, FT_INT32 },
     { FieldDescriptor::CPPTYPE_UINT64, FT_UINT64 },
     { FieldDescriptor::CPPTYPE_INT64, FT_INT64 },
     { FieldDescriptor::CPPTYPE_DOUBLE, FT_DOUBLE },
     { FieldDescriptor::CPPTYPE_FLOAT, FT_FLOAT },
     { FieldDescriptor::CPPTYPE_BOOL, FT_BOOLEAN },
     { FieldDescriptor::CPPTYPE_ENUM, FT_INT32 }, 
     { FieldDescriptor::CPPTYPE_STRING, FT_STRING } };

  for( int i =0; i < sizeof(ftmap)/sizeof(ftmap_t); i++ )
  {
     if( ftmap[i].cpp_type == type ) 
     {
       return ftmap[i].fttype;
     }
  } 

  DBG_ERR( "Couldnt find type for cpp type " << type );
  return FT_NONE;
}

void wireshark_pb_process_|PLUGIN_NAME|_register_proto( int proto )
{
  if( handleMap == NULL )
  {
    handleMap = new HandleMap();
  }

  DescriptorList messageDescriptorList;
  FieldDescriptorList fieldDescriptorList;
  
  // we process the message definition depth first
  const Descriptor* desc = |PACKAGE||PLUGIN_NAME|::descriptor();

  messageDescriptorList.push_back( desc );
  
  while( !messageDescriptorList.empty() )
  {
    const Descriptor* messageDescriptor = messageDescriptorList.back();
    messageDescriptorList.pop_back();    
    
    DBG( "Register message ( " << messageDescriptor->name() << " )" );
    
    wireshark_pb_process_|PLUGIN_NAME|_register_subtree_( proto, 
							  messageDescriptor->name(), 
							  messageDescriptor->full_name() );
    
    for( int i = 0; i < messageDescriptor->field_count(); i++ )
    {
      const FieldDescriptor* fieldDescriptor = messageDescriptor->field( i );
      
      if( fieldDescriptor->is_repeated() )
      {
	DBG( "Register repeat field ( " << fieldDescriptor->name() << " )" );
	
	wireshark_pb_process_|PLUGIN_NAME|_register_subtree_( proto,
							      fieldDescriptor->name(),
							      fieldDescriptor->full_name() );
      }
 
      if( fieldDescriptor->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE )
      {
	messageDescriptorList.push_back( fieldDescriptor->message_type() );
      }
      else
      {
	fieldDescriptorList.push_back( fieldDescriptor );
      }
    }
  }
  
  // process all field descriptors at very end
  for( FieldDescriptorList::iterator it = fieldDescriptorList.begin(); 
       it != fieldDescriptorList.end(); it++ )
  {
    const FieldDescriptor* fieldDescriptor = *it;
    Handles handles;
    DBG( "Register field ( " << fieldDescriptor->name() << " : " << fieldDescriptor->full_name() << ")" );
    wireshark_pb_process_|PLUGIN_NAME|_register_field( proto, 
						       wireshark_pb_process_|PLUGIN_NAME|_get_type( fieldDescriptor->cpp_type() ),
						       fieldDescriptor->name().c_str(),
						       fieldDescriptor->name().c_str(),
						       &(handles.handle) );
    handleMap->insert( StringHandlePair( fieldDescriptor->full_name(), handles ) );
  }
}

void wireshark_pb_process_|PLUGIN_NAME|_message( const Message& message, proto_tree* tree,
						 tvbuff_t* tvb, int& offset )
{
  typedef std::pair<proto_tree*, const Message*> TreeMessagePair;
  typedef std::list<TreeMessagePair> TreeMessagePairList;

  TreeMessagePairList treeMessagePairList;

  // we process the message tree breadth wise
  treeMessagePairList.push_back( TreeMessagePair( tree, &message ) );

  while ( !treeMessagePairList.empty() )
  {
    TreeMessagePair treeMessagePair = treeMessagePairList.front();
    treeMessagePairList.pop_front();

    proto_tree* current_tree = treeMessagePair.first;
    const Message& currentMessage = *(treeMessagePair.second);

    DBG( "Dissecting " << currentMessage.GetDescriptor()->name() );

    HandleMap::iterator it = handleMap->find( currentMessage.GetDescriptor()->full_name() );

    if( it == handleMap->end() ) 
    {
      DBG_ERR( "couldnt find handle for " << currentMessage.GetDescriptor()->full_name() );
      continue;
    }

    Handles handles = it->second;

    // add a subtree for current message
    proto_item* tree_item = proto_tree_add_item( current_tree, handles.handle, tvb, 
						 offset, 0, false );

    proto_tree* leaf = proto_item_add_subtree( tree_item, *(handles.tree_handle) );

    // now loop through all the field in current message
    const Reflection* reflection = currentMessage.GetReflection();
    FieldDescriptorList fields ;

    //int len = reflection->SpaceUsed( message );
    //DBG( "space used = " << len );

    reflection->ListFields( currentMessage, &fields );
    
    for( FieldDescriptorList::iterator it = fields.begin(); it!=fields.end(); it++ )
    {
      const FieldDescriptor* field = *it;
      if( field->is_repeated() )
      {
	int size = reflection->FieldSize( currentMessage, field );
	for( int i = 0; i < size; i++ )
	{
	  const Message& subMessage = reflection->GetRepeatedMessage( currentMessage, field, i );
	  treeMessagePairList.push_back( TreeMessagePair( leaf, &subMessage ) );
	}
      }
      else if( field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE ) 
      {
	treeMessagePairList.push_back( TreeMessagePair( leaf,
							&reflection->GetMessage( currentMessage, field ) ) );
      }
      else // plain simple field. process it immediately
      {
	wireshark_pb_process_|PLUGIN_NAME|_field( reflection, 
						  currentMessage,
						  field, 
						  leaf, 
						  tvb, offset );
      }
    }
  }
}

void wireshark_pb_process_|PLUGIN_NAME|_field( const Reflection* reflection, 
					       const Message& message,
					       const FieldDescriptor* field, 
					       proto_tree* tree, 
					       tvbuff_t* tvb, int& offset )
{
    int len = 0;

    DBG( "Dissecting field " << field->name() << " " << len );

    HandleMap::iterator it = handleMap->find( field->full_name() );

    if( it == handleMap->end() ) 
    {
      DBG_ERR( "Couldnt find handle for " << field->full_name() );
      return;
    }

    Handles handles = it->second;

    const EnumValueDescriptor* enumDesc = NULL;

    switch( field->cpp_type() )
    {
    case FieldDescriptor::CPPTYPE_UINT32:
      len = 4;
      proto_tree_add_uint( tree, handles.handle, tvb, offset, 0, reflection->GetUInt32( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_INT32:
      len = 4;
      proto_tree_add_int( tree, handles.handle, tvb, offset, 0, reflection->GetInt32( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_FLOAT:
      len = 4;
      proto_tree_add_float( tree, handles.handle, tvb, offset, 0, reflection->GetFloat( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_UINT64:
      len = 8;
      proto_tree_add_uint64( tree, handles.handle, tvb, offset, 0, reflection->GetUInt64( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_INT64:
      len = 8;
      proto_tree_add_int64( tree, handles.handle, tvb, offset, 0, reflection->GetInt64( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_DOUBLE:
      len = 8;       
      proto_tree_add_double( tree, handles.handle, tvb, offset, 0, reflection->GetDouble( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_BOOL:
      proto_tree_add_boolean( tree, handles.handle, tvb, offset, 0, reflection->GetBool( message, field ) );
      break;
    case FieldDescriptor::CPPTYPE_ENUM:
      enumDesc = reflection->GetEnum( message, field );
      proto_tree_add_int_format_value( tree, handles.handle, tvb, offset, 0, 
				       enumDesc->number(), "%d ( %s )", enumDesc->number(),
				       enumDesc->name().c_str() );
      break;
    case FieldDescriptor::CPPTYPE_STRING:
      proto_tree_add_string( tree, handles.handle, tvb, offset, 0, 
			     reflection->GetString( message, field ).c_str() );
      break;
    default:
      proto_tree_add_item( tree, handles.handle, tvb, offset, 0, true );
    };

    // we really dont know how the bytes are encoded in protobuf, so we dont know the actual
    // length of each field
    //offset+=len;
}

}
